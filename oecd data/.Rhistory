renewelect <- read_excel("renewable_energy_pct.xlsx")
renewelect <- renewelect[renewelect$MEASURE =="PC_PRYENRGSUPPLY",]
renewelect <- renewelect[,c(1,6,7)]
colnames(renewelect)[1:3]<-c("iso3c","year","VALUE")
renewelect$indicator_code<-"OECD.REN.ELE"
write.xlsx(renewelect, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx" )
write.xlsx(mat.prod, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx" )
# Material productivity
mat.prod <- read_excel("OECD_Material productivity_USDDMC_KG.xlsx")
View(mat.prod)
mat.prod <- read_excel("OECD_Material productivity_USDDMC_KG.xlsx")
mat.prod <- mat.prod[mat.prod$SUBJECT =="TOTMAT",]
mat.prod <- mat.prod[,c(1,6,7)]
colnames(mat.prod)[1:3]<-c("iso3c","year","VALUE")
mat.prod$indicator_code<-"OECD.MATPROD"
write.xlsx(mat.prod, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx" )
write.xlsx(munic.waste, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx" )
# Municipal waste
munic.waste <- read_excel("munic_waste.xlsx")
View(munic.waste)
munic.waste <- read_excel("munic_waste.xlsx")
munic.waste <- munic.waste[munic.waste$MEASURE =="KG_CAP",]
munic.waste <- munic.waste[,c(1,6,7)]
colnames(munic.waste)[1:3]<-c("iso3c","year","VALUE")
munic.waste$indicator_code<-"OECD.WASTEPOP"
write.xlsx(munic.waste, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx" )
oecd.excel <- rbind(munic.waste,mat.prod,renewelect,renewpct,pisa.sci, pisa.read,pisa.math, elec.gen)
oecd.excel <- rbind(munic.waste,mat.prod,renewelect,renewpct,pisa.sci, pisa.read,pisa.math, elec.gen)
oecd.excel$source <- "OECD"
write.xlsx(oecd.excel, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/test.xlsx")
library(countrycode)
library(dplyr)
# Land use data
url.land<-"http://fenixservices.fao.org/faostat/static/bulkdownloads/Environment_LandUse_E_All_Data_(Normalized).zip"
temp <- tempfile()
download.file(url.land, temp)
unzip(temp, "Environment_LandUse_E_All_Data_(Normalized).csv")
landuse <- read.csv("Environment_LandUse_E_All_Data_(Normalized).csv")
unlink(temp)
# % Agricultural
agriland <- landuse[landuse$Item %in% "Agricultural land",]
agriland<-agriland[,-c(1,3:6,8:9,11)]
names(agriland)[1:3] <-c("iso3c","year","VALUE")
agriland$indicator_code <- "FAO.AGRI"
# % Arable
arabland <- landuse[landuse$Item %in% "Arable land",]
arabland<-arabland[,-c(1,3:6,8:9,11)]
names(arabland)[1:3] <-c("iso3c","year","VALUE")
arabland$indicator_code <- "FAO.ARABLE"
# % Forest
forestland <- landuse[landuse$Item %in% "Forest land",]
forestland<-forestland[,-c(1,3:6,8:9,11)]
names(forestland)[1:3] <-c("iso3c","year","VALUE")
forestland$indicator_code <- "FAO.FOREST"
fao <- rbind(agriland,arabland,forestland)
pop<-WDI(indicator="SP.POP.TOTL",start = "2019", end="2019")
clist <- unique(pop$country)
fao <- fao[fao$iso3c %in% clist,]
fao$source <- "FAO"
clist<-countrycode(fao$iso3c, origin = 'country.name', destination = 'iso3c')
fao <- data.frame(fao,clist)
colnames(fao)[c(1,7)]<-c("country","iso3c")
fao <- na.omit(fao)
fao <- fao[,-1]
colnames(fao)[5]<-"iso3c"
benchmark <- fao
#--------------------------------
# UIS datasets
# Source: https://apiportal.uis.unesco.org/bdds
# Notes: No longer updating API - check above site for updated zip links
#--------------------------------
# ******** UIS Education indicators ********
urluis<-"ftp://ftp.uis.unesco.org/BDDS/NATMON.zip"
temp <- tempfile()
download.file(urluis, temp)
unzip(temp, "NATMON_DATA_NATIONAL.csv")
unzip(temp, "NATMON_LABEL.csv")
uis <- read.csv("NATMON_DATA_NATIONAL.csv")
uis.label <- read.csv("NATMON_LABEL.csv")
unlink(temp)
# Govt exp on educ
educexp <- uis[uis$INDICATOR_ID %in% "XGDP.FSgov" ,]
educexp<-educexp[,-c(1,5,6)]
names(educexp)[1:3] <-c("iso3c","year","VALUE")
educexp$indicator_code <- "uis.XPD.TOTL.GD.ZS"
# Primary enroll (net)
netprim <- uis[uis$INDICATOR_ID %in% "NERT.1.cp" ,]
netprim<-netprim[,-c(1,5,6)]
names(netprim)[1:3] <-c("iso3c","year","VALUE")
netprim$indicator_code <- "uis.PRM.NENR"
# Secondary enroll (gross)
grosecond <- uis[uis$INDICATOR_ID %in% "GER.2t3" ,]
grosecond<-grosecond[,-c(1,5,6)]
names(grosecond)[1:3] <-c("iso3c","year","VALUE")
grosecond$indicator_code <- "uis.SEC.NENR"
# Enrollment ratio (GPI)
enrolld <- uis[uis$INDICATOR_ID %in% "GER.1t3.GPI" ,]
enrolld<-enrolld[,-c(1,5,6)]
names(enrolld)[1:3] <-c("iso3c","year","VALUE")
enrolld$indicator_code <- "UIS.ENR.PRSC.FM.ZS"
# Mean schooling
avgschool <- uis[uis$INDICATOR_ID %in% "MYS.1t8.Ag25t99" ,]
avgschool<-avgschool[,-c(1,5,6)]
names(avgschool)[1:3] <-c("iso3c","year","VALUE")
avgschool$indicator_code <- "uis.SCHOOLING"
uisnm <-rbind(educexp,netprim,grosecond,avgschool, enrolld)
# ******** UIS SDG education indicators ********
urlsdg <-"ftp://ftp.uis.unesco.org/BDDS/SDG.zip"
temp<- tempfile()
download.file(urlsdg, temp)
unzip(temp, "SDG_DATA_NATIONAL.csv")
unzip(temp, "SDG_LABEL.csv")
sdg <- read.csv("SDG_DATA_NATIONAL.csv")
sdg.label <- read.csv("SDG_LABEL.csv")
unlink(temp)
# Percentage of qualified teachers in primary education, both sexes (%)
qual.teach.p <- sdg[sdg$INDICATOR_ID %in% "QUTP.1" ,]
qual.teach.p<-qual.teach.p[,-c(1,5,6)]
names(qual.teach.p)[1:3] <-c("iso3c","year","VALUE")
qual.teach.p$indicator_code <- "uis.PRM.TCAQ.ZS"
# Percentage of qualified teachers in secondary education, both sexes (%)
qual.teach.s <- sdg[sdg$INDICATOR_ID %in% "QUTP.2t3" ,]
qual.teach.s<-qual.teach.s[,-c(1,5,6)]
names(qual.teach.s)[1:3] <-c("iso3c","year","VALUE")
qual.teach.s$indicator_code <- "uis.SEC.TCAQ.ZS"
# Pre primary enrollment
preprim <- sdg[sdg$INDICATOR_ID %in% "GER.02" ,]
preprim<-preprim[,-c(1,5,6)]
names(preprim)[1:3] <-c("iso3c","year","VALUE")
preprim$indicator_code <- "uis.PRE.ENRR"
# Primary completion
complet <- sdg[sdg$INDICATOR_ID %in% "CR.1" ,]
complet<-complet[,-c(1,5,6)]
names(complet)[1:3] <-c("iso3c","year","VALUE")
complet$indicator_code <- "uis.COMPLRATE.PRIMARY"
# Pupil (qualified) teacher ratio
tratio <- sdg[sdg$INDICATOR_ID %in% "PTRHC.1.qualified" ,]
tratio<-tratio[,-c(1,5,6)]
names(tratio)[1:3] <-c("iso3c","year","VALUE")
tratio$indicator_code <- "uis.PRM.ENRL.TC.ZS"
# Math proficiency
math <- sdg[sdg$INDICATOR_ID %in% "Math.Primary" ,]
math<-math[,-c(1,5,6)]
names(math)[1:3] <-c("iso3c","year","VALUE")
math$indicator_code <- "uis_math"
# Reading proficiency
read <- sdg[sdg$INDICATOR_ID %in% "Read.Primary" ,]
read<-read[,-c(1,5,6)]
names(read)[1:3] <-c("iso3c","year","VALUE")
read$indicator_code <- "uis_reading"
# Literacy rate
lit <- sdg[sdg$INDICATOR_ID %in% "LR.Ag15t99" ,]
lit<-lit[,-c(1,5,6)]
names(lit)[1:3] <-c("iso3c","year","VALUE")
lit$indicator_code <- "uis.ADT.LITR.ZS"
sdg.tot <- rbind(math,read,lit,tratio,complet,preprim,qual.teach.s,qual.teach.p)
unesco<-rbind(uisnm,sdg.tot)
unesco$source <- "UIS"
benchmark <- rbind(benchmark,unesco)
#--------------------------------
# ILO datasets
# Notes: Using built-in R library that parses the HTML, link to CRAN
#--------------------------------
library(Rilostat)
# Search database for indicators
toc <- get_ilostat_toc()
# Total unemployment % labor force (15-64)
unemp <- get_ilostat(id = "SDG_0852_SEX_AGE_RT_A", segment = 'indicator', filters=list(sex="T",classif1="AGE_YTHADULT_Y15-64"))
unemp<-unemp[,-c(2:5,8:11)]
names(unemp)[c(1:3)] <-c("iso3c","year","VALUE")
unemp$indicator_code <- "ILO.UNEMP.15"
# Youth employment
youth <- get_ilostat(id = "UNE_2UNE_SEX_AGE_NB_A", segment = 'indicator',filters = list(sex="T",classif1="AGE_YTHADULT_Y15-24"))
youth<-youth[,-c(2:5,8)]
names(youth)[c(1:3)] <-c("iso3c","year","VALUE")
youth$indicator_code <- "ILO.UNEMP.1524"
# --- Labor force participation ---
lpartic <- get_ilostat(id = "EAP_2WAP_SEX_AGE_RT_A", filters = list(classif1 = 'AGE_AGGREGATE_TOTAL'),segment = 'indicator')
# Total labor force participation
partic <- lpartic[lpartic$sex %in% "SEX_T",]
partic<-partic[,-c(2:5,8)]
names(partic)[c(1:3)] <-c("iso3c","year","VALUE")
partic$indicator_code <- "ILO.LF"
# Female labor force participation
female <- lpartic[lpartic$sex %in% "SEX_F",]
female<-female[,-c(2:5,8)]
names(female)[c(1:3)] <-c("iso3c","year","VALUE")
female$indicator_code <- "UIS.TLF.CACT.FE.ZS"
# --- Employment by economic activity ---
econact <- get_ilostat(id = "EMP_TEMP_SEX_ECO_DT_A", segment = 'indicator', filters = list(sex = 'T',classif1=c("ECO_SECTOR_IND","ECO_SECTOR_AGR","ECO_SECTOR_SER")))
# Agriculture employment
agri <- econact[econact$classif1 %in% "ECO_SECTOR_AGR",]
agri<-agri[,-c(2:5,8:11)]
names(agri)[c(1:3)] <-c("iso3c","year","VALUE")
agri$indicator_code <- "ILO.EMPL.AGRI"
# Industrial employment
indus <- econact[econact$classif1 %in% "ECO_SECTOR_IND",]
indus<-indus[,-c(2:5,8:11)]
names(indus)[c(1:3)] <-c("iso3c","year","VALUE")
indus$indicator_code <- "ILO.EMPL.INDUSTRY"
# Service employment
serv <- econact[econact$classif1 %in% "ECO_SECTOR_SER",]
serv<-serv[,-c(2:5,8:11)]
names(serv)[c(1:3)] <-c("iso3c","year","VALUE")
serv$indicator_code <- "ILO.EMPL.SERVICES"
# --- Labor force by education level ---
educ <- get_ilostat(id = "EAP_TEAP_SEX_AGE_EDU_DT_A", segment = 'indicator',filters = list(sex = 'T',classif1="AGE_AGGREGATE_TOTAL"))
# % with basic education
bas<-educ[educ$classif2 %in% "EDU_AGGREGATE_BAS",]
bas<-bas[,-c(2:6,9:12)]
names(bas)[c(1:3)] <-c("iso3c","year","VALUE")
bas$indicator_code <- "ILO.EMPL.EDUBASIC"
# % with intermediate education
int<-educ[educ$classif2 %in% "EDU_AGGREGATE_INT",]
int<-int[,-c(2:6,9:12)]
names(int)[c(1:3)] <-c("iso3c","year","VALUE")
int$indicator_code <- "ILO.EMPL.EDUINTER"
# % with advanced education
adv<-educ[educ$classif2 %in% "EDU_AGGREGATE_ADV",]
adv<-adv[,-c(2:6,9:12)]
names(adv)[c(1:3)] <-c("iso3c","year","VALUE")
adv$indicator_code <- "ILO.EMPL.EDUADV"
ilo <- rbind(partic,unemp, youth, agri, indus, serv, bas, int, adv)
ilo <- rbind (ilo,female)
ilo$source <- "ILO"
benchmark <-rbind(ilo,benchmark)
#--------------------------------
# WHO: Median Age & Obesity
# Notes: use get_gho_codes() command to see available ds, toggle help in viewer window (bottom right) for better view
#--------------------------------
library(rgho)
# Search database for indicators
# get_gho_codes()
# Health expenditure %GDP
health <- get_gho_data(dimension = "GHO", code = "GHED_CHEGDP_SHA2011")
health<-health[,-c(1:2,4:5,8:11)]
names(health)[1:3] <-c("year","iso3c","VALUE")
health$indicator_code <- "HEALTH.EXP.GPD"
health <- na.omit(health)
# Out of pocket expenditure
oop <- get_gho_data(dimension = "GHO", code = "GHED_OOPSCHE_SHA2011")
oop<-oop[,-c(1:2,4:5,8:11)]
names(oop)[1:3] <-c("year","iso3c","VALUE")
oop$indicator_code <- "HEALTH.OOPS.EXP"
oop <- na.omit(oop)
# Access to sanitation
sani <- get_gho_data(dimension = "GHO", code = "WSH_SANITATION_BASIC")
sani<- sani[sani$RESIDENCEAREATYPE %in% "TOTL",]
sani<-sani[,-c(1:2,4,6:7,9:11)]
names(sani)[1:3] <-c("year","iso3c","VALUE")
sani$indicator_code <- "HEALTH.SANITATION.POP"
sani <- na.omit(sani)
# Infant mortality rate (probability of death between birth and 1)
infan <- get_gho_data(dimension = "GHO", code = "MDG_0000000001", filters=list(SEX="TOTL"))
infan <- infan[infan$SEX=="BTSX",]
infan<-infan[,-c(1:2,4:6,8,10:13)]
names(infan)[1:3] <-c("year","iso3c","VALUE")
infan$indicator_code <- "HEALTH.MORTALITY.PROB"
infan <- na.omit(infan)
# Prevalence of HIV
hiv <- get_gho_data(dimension = "GHO", code = "MDG_0000000029")
hiv<-hiv[,-c(1:2,4,6,8:10)]
names(hiv)[1:3] <-c("year","iso3c","VALUE")
hiv$indicator_code <- "HEALTH.HIV.PROB"
hiv <- na.omit(hiv)
# Stunting
stunt <- get_gho_data(dimension = "GHO", code = "stunt5")
stunt<-stunt[,-c(1:3,5,7:14,16:18)]
names(stunt)[1:3] <-c("year","iso3c","VALUE")
stunt <- aggregate(VALUE ~ year + iso3c, stunt, FUN = mean)
stunt$indicator_code <- "HEALTH.STUNTING"
stunt<-na.omit(stunt)
# Underweight
under <- get_gho_data(dimension = "GHO", code = "uweight5")
under<-under[,-c(1:3,5,7:12,14:16)]
names(under)[1:3] <-c("year","iso3c","VALUE")
under <- aggregate(VALUE ~ year + iso3c, under, FUN = mean)
under$indicator_code <- "HEALTH.UNDERWEIGHT"
under <- na.omit(under)
# Overweight
over <- get_gho_data(dimension = "GHO", code = "overwgt5")
over<-over[,-c(1:3,5,7:14,16:18)]
names(over)[1:3] <-c("year","iso3c","VALUE")
over <- aggregate(VALUE ~ year + iso3c, over, FUN = mean)
over$indicator_code <- "HEALTH.OVERWEIGHT"
over <- na.omit(over)
# Physicians per 1,000 (replacing 10,000)
phys <- get_gho_data(dimension = "GHO", code = "HRH_26")
phys<-phys[,-c(1:2,4,7:10)]
names(phys)[1:3] <-c("year","iso3c","VALUE")
phys$indicator_code <- "HEALTH.DOC.POP"
phys <- na.omit(phys)
# Hospital beds per 10,000 (DIDNT WORK)
hosp <- get_gho_data(dimension = "GHO", code = "WHS6_102")
hosp<-hosp[,-c(1:2,4,7:10)]
names(hosp)[1:3] <-c("year","iso3c","VALUE")
hosp$indicator_code <- "HEALTH.BEDS.POP"
hosp <- na.omit(hosp)
# Health exp per capita
exppc <- get_gho_data(dimension = "GHO", code = "GHED_CHEGDP_SHA2011")
exppc<-exppc[,-c(1:2,4:5,8:11)]
names(exppc)[1:3] <-c("year","iso3c","VALUE")
exppc$indicator_code <- "HEALTH.EXP.PCAP"
exppc <- na.omit(exppc)
who <- rbind(exppc,hosp,phys,hiv,infan,sani,oop,health,stunt,under,over)
who$source <- "WHO"
benchmark <- rbind(benchmark,who)
#--------------------------------
# OECD data
# Notes:
#--------------------------------
library(OECD)
# Search database
#oecddsets <- get_datasets()
# Environmental taxes
dstrucen <- get_data_structure("SIGI2019")
couenv<-dstrucen$COU
clistenv<-couenv$id
envitax<- get_dataset("ERTR",filter=list(clistenv,"BASE_REV","TOT","TOT"),
start_time = 2000, end_time = 2020)
envitax <- envitax[,-c(2:5,8)]
names(envitax)[1:3] <-c("iso3c","year","VALUE")
envitax$indicator_code <- "OECD.ENVTAX.REV"
# Gender equality indicators
gen <-get_dataset("SIGI2019")
gen <- gen[gen$REGION=="ALL" & gen$INCOME=="AIC",]
gen <- gen[,-c(1,3,5)]
names(gen)[1:4] <-c("iso3c","indicator_code","year","VALUE")
gen1 <- gen[gen$indicator_code %in% "RCL__2",]
gen2 <- gen[gen$indicator_code %in% "SIGI_2",]
gen3 <- gen[gen$indicator_code %in% "DF__2",]
gen4 <- gen[gen$indicator_code %in% "RPI__2",]
gen5 <- gen[gen$indicator_code %in% "RAPFR__2",]
gen.tot<-rbind(gen1,gen2,gen3,gen4,gen5)
gen.tot <-as.data.table(gen.tot)
# Exposure to PM2.5
library(rsdmx)
url.oecd <- "https://stats.oecd.org/restsdmx/sdmx.ashx/GetData/EXP_PM2_5/AUS+AUT+BEL+CAN+CHL+COL+CZE+DNK+EST+FIN+FRA+DEU+GRC+HUN+ISL+IRL+ISR+ITA+JPN+KOR+LVA+LTU+LUX+MEX+NLD+NZL+NOR+POL+PRT+SVK+SVN+ESP+SWE+CHE+GBR+USA+EU28+G7M+G20+OECD+WLD+NMEC+AFG+ALB+DZA+AND+AGO+ATG+ARG+ARM+AZE+BHS+BHR+BGD+BRB+BLR+BLZ+BEN+BTN+BOL+BIH+BWA+BRA+BRN+BGR+BFA+BDI+KHM+CMR+CPV+CAF+TCD+CHN+COM+COG+COD+CRI+CIV+HRV+CUB+DJI+DMA+DOM+ECU+EGY+SLV+GNQ+ERI+ETH+FJI+MKD+GAB+GMB+GEO+GHA+GRD+GTM+GIN+GNB+GUY+HTI+HND+IND+IDN+IRQ+JAM+JOR+KAZ+KEN+PRK+KWT+KGZ+LAO+LBN+LSO+LBR+LBY+LIE+MDG+MWI+MYS+MLI+MLT+MRT+MUS+FSM+MDA+MNG+MNE+MAR+MOZ+MMR+NAM+NPL+NIC+NER+NGA+OMN+PAK+PAN+PNG+PRY+PER+PHL+QAT+ROU+RUS+RWA+LCA+VCT+WSM+SMR+STP+SAU+SEN+SRB+SYC+SLE+SGP+SLB+SOM+ZAF+LKA+SDN+SUR+SSD+SWZ+SYR+TJK+TZA+THA+TLS+TGO+TON+TTO+TUN+TKM+UGA+UKR+ARE+URY+UZB+VUT+VEN+VNM+YEM+ZMB+ZWE.TOTAL+398+69550.TOTAL.PWM_EX+SPEX_10+SPEX_15+SPEX_25+SPEX_35+SPOP_W/all?startTime=1990&endTime=2017"
pm2 <- readSDMX(url.oecd)
pm2 <- as.data.frame(pm2)
# Average exposure to PM2
pm2.avg <- pm2[pm2$VAR=='PWM_EX',]
pm2.avg <- pm2.avg[,c(1,8,9)]
colnames(pm2.avg)[1:3]<-c("iso3c","year","VALUE")
pm2.avg <- filter(pm2.avg, !(iso3c %in% c("AGO","ZWE")))
pm2.avg$indicator_code <- "ENVI2"
# Percent exposed to 30%+
pm2.30 <- pm2[pm2$VAR=='SPEX_35',]
pm2.30 <- pm2.30[,c(1,8,9)]
colnames(pm2.30)[1:3]<-c("iso3c","year","VALUE")
pm2.30 <- filter(pm2.30, !(iso3c %in% c("AGO","ZWE")))
pm2.30$indicator_code <- "OECD.PM25.WHO"
oecd <- rbind(gen.tot,envitax,pm2.avg,pm2.30)
oecd$source <- "OECD"
benchmark <- rbind(oecd,benchmark)
#--------------------------------
# OEC data
# Notes:
#--------------------------------
library(jsonlite)
url <- "https://oec.world/olap-proxy/data.jsonrecords?cube=legacy_complexity_eci_a&drilldowns=Country,Year&measures=ECI&parents=false&sparse=false"
oec <- fromJSON(url)
eci <-oec[["data"]]
eci <- eci[,-1]
names(eci)[1:3]<-c("country","year","VALUE")
iso3c<-countrycode(eci$country, origin = 'country.name', destination = 'iso3c')
eci<-data.frame(iso3c,eci)
eci <- eci[,-2]
eci$source <- "Economic Complexity Index (OEC)"
eci$indicator_code <- "OEC.ECI"
benchmark <- rbind(eci,benchmark)
bench.df <- benchmark
#--------------------------------
# Import Gallup
# Notes: Unable to use API
#--------------------------------
setwd("~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/Vararat data")
# Confidence in justice
judicial_system <- read_excel("Gallup_Confidence in judicial system.xlsx")
colnames(judicial_system)[1:8] <- judicial_system[7,]
judicial_system<-judicial_system[-c(1:7),]
judicial_system <- judicial_system[,c(1,2,5)]
colnames(judicial_system)[1:3]<-c("country","year","VALUE")
judicial_system$indicator_code <- "CONF2"
# confidence in police
police <- read_excel("Gallup_Confidence in local police.xlsx")
colnames(police)[1:8] <- police[7,]
police<-police[-c(1:7),]
police <- police[,c(1,2,5)]
colnames(police)[1:3]<-c("country","year","VALUE")
police$indicator_code <- "CONF1"
# Confidence in military
military <- read_excel("Gallup_Confidence in military.xlsx")
colnames(military)[1:8] <- military[7,]
military<-military[-c(1:7),]
military <- military[,c(1,2,5)]
colnames(military)[1:3]<-c("country","year","VALUE")
military$indicator_code <- "CONF3"
# Life satisfaction - struggling/thriving
life.eval <- read_excel("Gallup_Life evaluation index.xlsx")
colnames(life.eval)[1:8] <- life.eval[7,]
life.eval<-life.eval[-c(1:7),]
life.thrive<-life.eval[,c(1,2,5)]
colnames(life.thrive)[1:3]<-c("country","year","VALUE")
life.thrive$indicator_code <-"LIFE11"
life.strug <- life.eval[,c(1,2,6)]
colnames(life.strug)[1:3]<-c("country","year","VALUE")
life.strug$indicator_code <-"LIFE12"
# Life satisfaction
life.today <- read_excel("Gallup_Life today.xlsx")
colnames(life.today)[1:6] <- life.today[7,]
life.today<-life.today[-c(1:7),]
life.today <- life.today[,c(1,2,5)]
colnames(life.today)[1:3]<-c("country","year","VALUE")
life.today$indicator_code <- "LIFE2"
# Local job perception
local.job <- read_excel("Gallup_Local job market perception.xlsx")
colnames(local.job)[1:8] <- local.job[7,]
local.job<-local.job[-c(1:7),]
local.job <- local.job[,c(1,2,5)]
colnames(local.job)[1:3]<-c("country","year","VALUE")
local.job$indicator_code <- "JOB1"
# Roads and highways perception
roads <- read_excel("Gallup_Roads and highways satisfaction.xlsx")
colnames(roads)[1:8] <- roads[7,]
roads<-roads[-c(1:7),]
roads <- roads[,c(1,2,5)]
colnames(roads)[1:3]<-c("country","year","VALUE")
roads$indicator_code <- "ROAD1"
gallup<-rbind(judicial_system,roads,local.job,life.today,life.strug,life.thrive,military,police)
iso3c <- countrycode(gallup$country, origin = "country.name",destination = "iso3c")
gallup<-data.frame(gallup,iso3c)
gallup<-gallup[,-1]
gallup$source <- "Gallup"
gallup <- filter(gallup, !(iso3c=="CYP"))
benchmark <-rbind(benchmark,gallup)
#--------------------------------
# Import OECD excel
# Notes: Unable to use API
#--------------------------------
# Electricity generation (TWh)
elec.gen <- read_excel("OECD_Electricity generation GWH.xlsx")
elec.gen <- elec.gen[elec.gen$SUBJECT=="TOT",]
elec.gen <- elec.gen[,c(1,6,7)]
colnames(elec.gen)[1:3]<-c("iso3c","year","VALUE")
elec.gen <- filter(elec.gen, (VALUE>0))
elec.gen$indicator_code <-"OECD.ELE.GEN"
# Pisa Math scores
pisa.math <- read_excel("PISA_maths.xlsx")
pisa.math <- pisa.math[,c(1,3,6,7)]
pisa.math<-aggregate(x=pisa.math$Value,
by=list(pisa.math$LOCATION,pisa.math$TIME),
FUN=mean)
colnames(pisa.math)[1:3]<-c("iso3c","year","VALUE")
pisa.math$indicator_code <- "pisa_math"
# Pisa Reading scores
pisa.read <- read_excel("PISA_reading.xlsx")
pisa.read <- pisa.read[,c(1,3,6,7)]
pisa.read<-aggregate(x=pisa.read$Value,
by=list(pisa.read$LOCATION,pisa.read$TIME),
FUN=mean)
colnames(pisa.read)[1:3]<-c("iso3c","year","VALUE")
pisa.read$indicator_code <- "pisa_reading"
# Pisa Science scores
pisa.sci <- read_excel("PISA_science.xlsx")
pisa.sci <- pisa.sci[,c(1,3,6,7)]
pisa.sci<-aggregate(x=pisa.sci$Value,
by=list(pisa.sci$LOCATION,pisa.sci$TIME),
FUN=mean)
colnames(pisa.sci)[1:3]<-c("iso3c","year","VALUE")
pisa.sci$indicator_code <- "pisa_science"
# Share renewable sources
renewpct <- read_excel("Renewable to total primary energy supply (TPES).xlsx")
renewpct <- renewpct[renewpct$MEASURE =="PC_PRYENRGSUPPLY",]
renewpct <- renewpct[,c(1,6,7)]
colnames(renewpct)[1:3]<-c("iso3c","year","VALUE")
renewpct$indicator_code<-"OECD.REN.TPES"
# Share renewable electricity
renewelect <- read_excel("renewable_energy_pct.xlsx")
renewelect <- renewelect[renewelect$MEASURE =="PC_PRYENRGSUPPLY",]
renewelect <- renewelect[,c(1,6,7)]
colnames(renewelect)[1:3]<-c("iso3c","year","VALUE")
renewelect$indicator_code<-"OECD.REN.ELE"
# Material productivity
mat.prod <- read_excel("OECD_Material productivity_USDDMC_KG.xlsx")
mat.prod <- mat.prod[mat.prod$SUBJECT =="TOTMAT",]
mat.prod <- mat.prod[,c(1,6,7)]
colnames(mat.prod)[1:3]<-c("iso3c","year","VALUE")
mat.prod$indicator_code<-"OECD.MATPROD"
# Municipal waste
munic.waste <- read_excel("munic_waste.xlsx")
munic.waste <- munic.waste[munic.waste$MEASURE =="KG_CAP",]
munic.waste <- munic.waste[,c(1,6,7)]
colnames(munic.waste)[1:3]<-c("iso3c","year","VALUE")
munic.waste$indicator_code<-"OECD.WASTEPOP"
oecd.excel <- rbind(munic.waste,mat.prod,renewelect,renewpct,pisa.sci, pisa.read,pisa.math, elec.gen)
oecd.excel$source <- "OECD"
benchmark <- rbind(oecd.excel,benchmark)
benchmark <- benchmark[which(benchmark$year >= 2000),]
benchmark <- benchmark[which(benchmark$year <= 2020),]
benchmark<-na.omit(benchmark)
# Review countries listed/check for missing ones
unique(benchmark$iso3c)
drops <- c("X01","X02","X03","X04","X05","X06","X07","X08","X09","X10","X11","X12", "X13", "X14", "X15", "X16", "X17", "X18", "X19",
"X20", "X21", "X22", "X23", "X24", "X25","X26", "X27", "X28", "X29", "X30", "X31", "X32", "X33",
"X34", "X35", "X36", "X37", "X38", "X39","X40", "X41", "X42", "X43", "X44", "X45", "X46", "X47", "X48", "X49", "X51",
"X52", "X53", "X54","X55", "X56", "X57", "X58", "X59", "X60", "X61", "X62", "X63", "X64", "X65", "X66",
"X67", "X68","X69", "X70", "X71", "X72", "X73", "X74", "X75", "X76", "X77", "X78", "X79", "X82", "X83", "X84","X85", "X86",
"X87", "X88", "X89", "X90", "X91","OECD","OECDE","OECDAO","OECDAM","OAVG_A","ANT","XDN")
benchmark <- filter(benchmark, !(iso3c %in% drops))
write.xlsx(benchmark, "~/OneDrive/OECD_Files_KChalmers/Benchmark Database Update/benchmark_r.xlsx")
rm(list = ls())
